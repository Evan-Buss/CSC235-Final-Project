Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/10/17 12:03:32
struct.asm						     Page 1 - 1


				;Evan Buss
				;CSC235 
				;Dr. Carelli
				;12/9/17
				;
				; Loads a list of olympians into an array of structs
				; and prints them out together with the total medal count


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000050			olympian STRUCT
 00000000  00000020 [			athlete BYTE 32 DUP('a')		; 32 bytes	
	    61
	   ]
 03730003  00000020 [			country BYTE 32 DUP('c')		; 32
	    63
	   ]
 06E60006  78				gender BYTE 'x'					; 1
					ALIGN DWORD						; add 3 bytes
 06E6000A  FFFFFFFF			medals DWORD -1,-1,-1			; gold silver bronze (96)
	   FFFFFFFF
	   FFFFFFFF
				olympian ENDS						; 164 total

				; define some constants for global use
 = 00000064			FSIZE = 100							; max file name size
 = 000003E8			BSIZE = 1000						; buffer size
 = 00000064			LINESIZE = 100						; max input line size
 = 0000000D			CR = 0Dh							; c/r
 = 0000000A			LF = 0Ah							; line feed
 = 0000002A			ASTERISK = 2Ah						; asterisk for new entry
 = 00000000			NULL = 00h							; null character
 = 00000020			SPACE = 20h							; space character
 = 00000005			MAXNUM = 5							; number of olympians

 00000000			.data
 00000000  00000064 [		filename BYTE FSIZE DUP(?)			; array to hold the file name
	    00
	   ]
 00000064  000003E8 [		buffer BYTE BSIZE DUP(?)			; buffer to hold the file contents
	    00
	   ]
 0000044C 45 6E 74 65 72	prompt BYTE "Enter a filename: ",0	; prompt for a string
	   20 61 20 66 69
	   6C 65 6E 61 6D
	   65 3A 20 00
 0000045F 49 6E 76 61 6C	ferror BYTE "Invalid input...",0	; error message
	   69 64 20 69 6E
	   70 75 74 2E 2E
	   2E 00

 00000470  00000020 [		olist olympian <>,<>,<>,<>,<>		; list of 5 olympians
	    61
	   ]
	   00000020 [
	    63
	   ] 78 000000
	   FFFFFFFF
	   FFFFFFFF
	   FFFFFFFF
	   00000020 [
	    61
	   ]
	   00000020 [
	    63
	   ] 78 000000
	   FFFFFFFF
	   FFFFFFFF
	   FFFFFFFF
	   00000020 [
	    61
	   ]
	   00000020 [
	    63
	   ] 78 000000
	   FFFFFFFF
	   FFFFFFFF
	   FFFFFFFF
	   00000020 [
	    61
	   ]
	   00000020 [
	    63
	   ] 78 000000
	   FFFFFFFF
	   FFFFFFFF
	   FFFFFFFF
	   00000020 [
	    61
	   ]
	   00000020 [
	    63
	   ] 78 000000
	   FFFFFFFF
	   FFFFFFFF
	   FFFFFFFF

				; for output listing
 00000600 4E 61 6D 65 3A	outname    BYTE "Name: ",0
	   20 00
 00000607 43 6F 75 6E 74	outcountry BYTE "Country: ",0
	   72 79 3A 20 00
 00000611 47 65 6E 64 65	outgender  BYTE "Gender: ",0
	   72 3A 20 00
 0000061A 4D 65 64 61 6C	outmedals  BYTE "Medals: ",0
	   73 3A 20 00
 00000623 54 6F 74 61 6C	outtotal   BYTE "Total Medals: ",0
	   20 4D 65 64 61
	   6C 73 3A 20 00

 00000000			.code
 00000000			main PROC
				    ; load the data from a file - push the arguments in reverse order
 00000000  68 000003E8			push BSIZE						; data buffer size
 00000005  68 00000064 R		push OFFSET buffer				; point to the start of the buffer
 0000000A  6A 64			push FSIZE						; file name size
 0000000C  68 00000000 R		push OFFSET filename			; point to the start of the string
 00000011  68 0000044C R		push OFFSET prompt				; output the prompt
 00000016  E8 00000040			call loadFile					; load the buffer
					
 0000001B  83 F8 00			cmp eax,0						; nothing read, bail out
 0000001E  74 02			jz ERROR

					; file loaded correctly, process and output the data

 00000020  EB 11			jmp PROCESS						; done loading in, start to process buffer

 00000022			ERROR:
 00000022  BA 0000045F R	    mov edx,OFFSET ferror			; output error message
 00000027  E8 00000000 E		call WriteString				; uses edx 
 0000002C  E8 00000000 E		call CrLf 
 00000031  EB 1C			jmp BYE							;jump to end

 00000033			PROCESS:
					;load data into structs
 00000033  6A 64			push LINESIZE					;maximum line read size
 00000035  68 00000064 R		push OFFSET buffer				;point to input buffer
 0000003A  68 00000470 R		push OFFSET olist				;point to start of struct array	
 0000003F  E8 00000143			Call loadAllOlympians			;populate struct array with data

					;display data to console
 00000044  50				push eax						;push number of olympians read in
 00000045  68 00000470 R		push OFFSET olist				;push start of array of olympian structs
 0000004A  E8 0000017F			Call outputAllOlympians			;outout the contents of struct array

 0000004F			BYE:
 0000004F  E8 00000000 E		call WaitMsg					; wait for user to hit enter
					invoke ExitProcess,0			; bye
 0000005B			main ENDP

				; Prompts for a file name and reads contents into a buffer
				; Receives:
				;	[ebp+8] = (null terminated) prompt string
				;	[ebp+12] = pointer to file name string
				;	[ebp+16] = max size of file name string
				;	[ebp+20] = pointer to buffer array
				;	[ebp+24] = max size buffer
				; Returns:
				;	EAX = number of bytes read, zero on an error
 0000005B			loadFile PROC
 0000005B  55				push ebp						; save the base pointer
 0000005C  8B EC			mov ebp,esp						; base of the stack frame
 0000005E  83 EC 04			sub esp,4						; create a local variable for the return value
 00000061  60				pushad							; save all of the registers (lazy)

					; prompt for the file name
 00000062  8B 55 08		    mov edx,[ebp+8]					; output the prompt
 00000065  E8 00000000 E		call WriteString				; uses edx  

					; get the file name, open the file
 0000006A  8B 55 0C			mov edx,[ebp+12]				; point to the start of the file name string
 0000006D  8B 4D 10			mov ecx,[ebp+16]				; max size for file name
 00000070  E8 00000000 E		call ReadString					; load the file name (string pointer in edx, max size in ecx)
 00000075  E8 00000000 E		call OpenInputFile				; open the file (expects name in edx, max size in ecx)
 0000007A  8B D8			mov ebx,eax						; save the file pointer (returned in eax)
 0000007C  83 F8 FF			cmp eax,INVALID_HANDLE_VALUE	; check for a valid file pointer 
 0000007F  74 19			je BAD							; bail out on a failure

					; load the buffer with the contents of the file
 00000081  8B 55 14			mov edx,[ebp+20]				; point to the start of the buffer
 00000084  8B 4D 18			mov ecx,[ebp+24]				; max size of the buffer
 00000087  E8 00000000 E		call ReadFromFile				; gets file handle from eax (loaded above)
 0000008C  89 45 FC			mov DWORD PTR [ebp-4],eax		; save the number of bytes in local variable
 0000008F  8B C3			mov eax,ebx						; restore the file pointer for closing (saved above)
 00000091  E8 00000000 E		call CloseFile					; close the file
 00000096  72 02			jc BAD							; if carry fag set, it's an error
 00000098  EB 0C			jmp OK

 0000009A			BAD:
 0000009A  E8 00000000 E		call WriteWindowsMsg			; got an error, display it
 0000009F  C7 45 FC			mov DWORD PTR [ebp-4],0			; error: set the number of bytes read to zero
	   00000000

 000000A6			OK:									; clean up
 000000A6  61				popad							; restore the registers
 000000A7  8B 45 FC			mov eax,DWORD PTR [ebp-4]		; save the number of bytes read for return in eax
 000000AA  8B E5			mov esp,ebp						; remove local varfrom stack 
 000000AC  5D				pop ebp
 000000AD  C2 0014			ret 20
 000000B0			loadFile ENDP

				;Copies data from input buffer, formats it, 
				;	and copies it to designated output 
				;Recieves:
				;	[ebp+8] = pointer to input BYTE array
				;	[ebp+12] = pointer to output BYTE array
				;	[ebp+16] = maximum buffer size
				;Returns:
				;	EAX = pointer to next character in input array
 000000B0			bufferCopy PROC
 000000B0  55				push ebp						;save the base pointer
 000000B1  8B EC			mov ebp, esp					;base of the stack frame
 000000B3  83 EC 04			sub esp, 4						;create local variable to return eax
 000000B6  60				pushad							;push all directories
					
				;assign registers to stack elements
 000000B7  8B 45 08			mov eax, [ebp+8]				;eax = pointer to input array	
 000000BA  8B 7D 0C			mov edi, [ebp+12]				;edi = poiunter to output location
 000000BD  8B 4D 10			mov ecx, [ebp+16]				;ecx = max buffer size
					
 000000C0			Copy:
 000000C0  8A 18			mov bl, [eax]					;move input character to bl
 000000C2  80 FB 0D			cmp bl, CR						;test if char = Return Char
 000000C5  74 0A			je Format						;yes? start formatting string
 000000C7  88 1F			mov [edi], bl					;otherwise copy to output
 000000C9  83 C0 01			add eax, TYPE BYTE				;next char of input array
 000000CC  83 C7 01			add edi, TYPE BYTE				;next char of output array
 000000CF  E2 EF			loop Copy						;keep going until Return char found

 000000D1			Format:
 000000D1  B3 00			mov bl, NULL					;bl = NULL
 000000D3  88 1F			mov [edi], bl					;replace blank char with NULL
 000000D5  83 C0 02			add eax, TYPE BYTE * 2			;increment past line feed
 000000D8  83 C7 01			add edi, TYPE BYTE				;increment output buffer

 000000DB			BYE:
 000000DB  89 45 FC			mov DWORD PTR [ebp-4],eax		;set local position variable = eax
 000000DE  61				popad							;pop all directories
 000000DF  8B 45 FC			mov eax,DWORD PTR [ebp-4]		;set eax = local variable
 000000E2  8B E5			mov esp, ebp					;remove local var from stack
 000000E4  5D				pop ebp
 000000E5  C2 000C			ret 12
 000000E8			bufferCopy ENDP


				;Receives from loadAllOlympians:    
				; [ebp+8] = pointer to the beginning of a struct object  
				; [ebp+12] = pointer  be the beginning of information in the buffer for the next athlete  
				; [ebp+16] = maximum number of bytes to read in each transfer (pass to bufferCopy).    
				;Returns (in eax):  
				; Pointer to the next Olympian (athlete) in the buffer  
 000000E8			loadOlympian PROC
 000000E8  55				push ebp							;save the base pointer
 000000E9  8B EC			mov ebp, esp						;base of the stack frame
 000000EB  83 EC 04			sub esp, 4							;create a local variable
 000000EE  60				pushad								;push all registers

				;assign registers to stack data
 000000EF  8B 75 08			mov esi, [ebp+8]					;esi = pointer to beginning of struct
 000000F2  8B 45 0C			mov eax, [ebp+12]					;eax = pointer to info buffer
 000000F5  8B 4D 10			mov ecx, [ebp+16]					;ecx = max # of bytes to transfer
					 
				;move athlete to struct
 000000F8  8B D6			mov edx, esi						;edx now at the beginning of the struct
 000000FA  51				push ecx 							;push max bytes to transfer
 000000FB  52				push edx							;push output location
 000000FC  50				push eax							;push input location
 000000FD  E8 FFFFFFAE			Call bufferCopy						;load athlete

				;move country to struct
 00000102  83 C2 20			add edx, OFFSET olympian.country	;edx at country field
 00000105  51				push ecx							;push max bytes to transfer
 00000106  52				push edx							;push output location
 00000107  50				push eax							;push input location
 00000108  E8 FFFFFFA3			Call bufferCopy						;load country

				;move gender to struct
 0000010D  8B D6			mov edx, esi						;edx now at beginning of struct
 0000010F  83 C2 40			add edx, OFFSET olympian.gender		;edx at gender field
 00000112  51				push ecx							;push max bytes to transfer
 00000113  52				push edx							;push output location
 00000114  50				push eax							;push input location
 00000115  E8 FFFFFF96			Call bufferCopy						;load gender

				;move gold medals to struct
 0000011A  51				push ecx							;push max bytes to transfer
 0000011B  FF 75 FC			push [ebp-4]						;push output location
 0000011E  50				push eax							;push input location
 0000011F  E8 FFFFFF8C			Call bufferCopy						;load gold medal to local var

 00000124  8B 55 FC			mov edx, DWORD PTR [ebp-4]			;load string into edx
 00000127  B9 00000004			mov ecx, 4							;set string length to DWORD
 0000012C  50				push eax							;eax is changed, so save it
 0000012D  E8 00000000 E		call ParseInteger32					;convert string to integer
 00000132  8B D6			mov edx, esi						;edx now at beginning of struct
 00000134  83 C2 44			add edx, OFFSET olympian.medals		;edx now at first medal field
 00000137  89 02			mov [edx], eax						;set value of medal to eax
 00000139  58				pop eax								;return eax to previous value

				;move silver medals to struct
 0000013A  51				push ecx							;push max bytes to transfer
 0000013B  FF 75 FC			push [ebp-4]						;push output location
 0000013E  50				push eax							;push input location
 0000013F  E8 FFFFFF6C			Call bufferCopy						;load gold medal to local var

 00000144  8B 55 FC			mov edx, DWORD PTR [ebp-4]			;load string into edx
 00000147  B9 00000004			mov ecx, 4							;set string length to DWORD
 0000014C  50				push eax							;eax is changed, so save it
 0000014D  E8 00000000 E		call ParseInteger32					;convert string to integer
 00000152  8B D6			mov edx, esi						;edx now at beginning of struct
 00000154  83 C2 48			add edx, OFFSET olympian.medals[4]	;edx now at first medal field
 00000157  89 02			mov [edx], eax						;set value of medal to eax
 00000159  58				pop eax								;return eax to previous value

				;move bronze medals to struct
 0000015A  51				push ecx							;push max bytes to transfer
 0000015B  FF 75 FC			push [ebp-4]						;push output location
 0000015E  50				push eax							;push input location
 0000015F  E8 FFFFFF4C			Call bufferCopy						;load gold medal to local var

 00000164  8B 55 FC			mov edx, DWORD PTR [ebp-4]			;load string into edx
 00000167  B9 00000004			mov ecx, 4							;set string length to DWORD
 0000016C  50				push eax							;eax is changed, so save it
 0000016D  E8 00000000 E		call ParseInteger32					;convert string to integer
 00000172  8B D6			mov edx, esi						;edx now at beginning of struct
 00000174  83 C2 4C			add edx, OFFSET olympian.medals[8]	;edx now at first medal field
 00000177  89 02			mov [edx], eax						;set value of medal to eax
 00000179  58				pop eax								;return eax to previous value

 0000017A  89 45 FC			mov DWORD PTR [ebp-4], eax			;set local var to eax
 0000017D  61				popad								;pop all registers
 0000017E  8B 45 FC			mov eax, DWORD PTR [ebp-4]			;set eax to local var
 00000181  8B E5			mov esp, ebp
 00000183  5D				pop ebp
 00000184  C2 000C			ret 12
 00000187			loadOlympian ENDP
					
				;Calls loadOlympian 5 times and
				;	loads each olympian into the array of structs
				;Receives from Main:
				;	[ebp+8] = pointer to the beginning of the struct array  
				;	[ebp+12] = pointer to the start of the buffer containing the data read from the file   
				;	[ebp+16] = Maximum number of bytes to read on each line (pass to loadOlympian).    
				;Returns:    
				;	EAX = Number of Olympians read  
 00000187			loadAllOlympians PROC
 00000187  55				push ebp
 00000188  8B EC			mov ebp, esp
 0000018A  83 EC 04			sub esp, 4						;local variable for olympian #
 0000018D  60				pushad							;save all registers
 0000018E  BF 00000000			mov edi, 0						;start counter at 0	
					
				;assign registers to stack data
 00000193  8B 55 08			mov edx, [ebp+8]				;edx = pointer to struct array
 00000196  8B 45 0C			mov eax, [ebp+12]				;eax = pointer to input buffer
 00000199  8B 75 10			mov esi, [ebp+16]				;esi = pointer to max bytes to read

 0000019C  56				push esi						;size
 0000019D  50				push eax						;push input buffer
 0000019E  52				push edx						;push struct pointer	
					
				;check for asterisk
 0000019F  8A 18			mov bl, [eax]					;bl = character at eax
 000001A1  80 FB 2A			cmp bl, ASTERISK				;bl == * ?
 000001A4  74 1B			je BYE							;yes? Exit

 000001A6  E8 FFFFFF3D			Call loadOlympian				;load data into struct
 000001AB  47				inc edi							;increment counter

 000001AC			L1:
 000001AC  8A 18			mov bl, [eax]					;bl = character at eax
 000001AE  80 FB 2A			cmp bl, ASTERISK				;bl == *?
 000001B1  74 0E			je	BYE							;yes? Exit
 000001B3  56				push esi						;push max bytes
 000001B4  50				push eax						;push input buffer
 000001B5  83 C2 50			add edx, TYPE olympian			;next struct
 000001B8  52				push edx						;push struct pointer
 000001B9  E8 FFFFFF2A			Call loadOlympian				;load data into struct
 000001BE  47				inc edi							;increment counter
 000001BF  EB EB			jmp L1							;repeat
					
 000001C1			BYE:
 000001C1  89 7D FC			mov DWORD PTR [ebp-4], edi		;set local position variable = edi
 000001C4  61				popad							;pop all directories
 000001C5  8B 45 FC			mov eax,DWORD PTR [ebp-4]		;set eax to local variable
 000001C8  8B E5			mov esp, ebp
 000001CA  5D				pop ebp
 000001CB  C2 000C			ret 12
 000001CE			loadAllOlympians ENDP

				;Goes through array of olympian structs calls
				;	outputOlympian for each one
				;Receives:
				;	[ebp+8] = pointer to olympian struct
				;	[ebp+12] = number of olympians
				;Returns:
				;	Nothing
 000001CE			outputAllOlympians PROC
 000001CE  55				push ebp
 000001CF  8B EC			mov ebp, esp
 000001D1  60				pushad							;push all registers
 000001D2  E8 00000000 E		Call Crlf						;add space
				;assign registers to stack data
 000001D7  8B 4D 0C			mov ecx, [ebp+12]				;set ecx to total number of olympians	
 000001DA  8B 45 08			mov eax, [ebp+8]				;set eax to pointer to olympian struct
					
 000001DD  50				push eax						;push pointer to struct
 000001DE  E8 00000019			Call outputOlympian				;display olympian in console
 000001E3  49				dec ecx							;decrement counter
 000001E4			L1:
 000001E4  83 F9 00			cmp ecx, 0						;check remaining olympians
 000001E7  74 0C			je BYE							;No more? Exit
 000001E9  83 C0 50			add eax, TYPE olympian			;move to next olympian in array
 000001EC  50				push eax						;push pointer to struct
 000001ED  E8 0000000A			Call outputOlympian				;display olympian in console
 000001F2  49				dec ecx							;decrement counter
 000001F3  EB EF			jmp L1							;repeat
 000001F5			BYE:
 000001F5  61				popad							;restore all registers
 000001F6  8B E5			mov esp, ebp
 000001F8  5D				pop ebp
 000001F9  C2 0008			ret 8
 000001FC			outputAllOlympians ENDP

				;Formats and displays an Olympian struct
				;Recieves:
				;	[ebp+8] = pointer to beginning of struct object
				;Returns:
				;	Nothing
 000001FC			outputOlympian PROC
 000001FC  55				push ebp
 000001FD  8B EC			mov ebp, esp
 000001FF  60				pushad
 00000200  B9 00000000			mov ecx, 0							;set ecx (total count) to 0
					
				;output athlete name
 00000205  BA 00000600 R		mov edx, OFFSET outname				;move output string to edx
 0000020A  E8 00000000 E		Call WriteString					;write to console

 0000020F  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object 
 00000212  8B D3			mov edx, ebx
 00000214  E8 00000000 E		Call WriteString
 00000219  E8 00000000 E		Call Crlf

				;output country
 0000021E  BA 00000607 R		mov edx, OFFSET outcountry			;move output string to edx
 00000223  E8 00000000 E		Call WriteString					;write to console

 00000228  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object 
 0000022B  83 C3 20			add ebx, OFFSET olympian.country	;set ebx tp country field
 0000022E  8B D3			mov edx, ebx						;mov ebx to edx
 00000230  E8 00000000 E		Call WriteString					;write to console
 00000235  E8 00000000 E		Call Crlf

				;output gender
 0000023A  BA 00000611 R		mov edx, OFFSET outgender			;move output string to edx
 0000023F  E8 00000000 E		Call WriteString					;write to console

 00000244  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object 
 00000247  83 C3 40			add ebx, OFFSET olympian.gender
 0000024A  8B D3			mov edx, ebx
 0000024C  E8 00000000 E		Call WriteString
 00000251  E8 00000000 E		Call Crlf

				;output medals
 00000256  BA 0000061A R		mov edx, OFFSET outmedals			;move output string to edx
 0000025B  E8 00000000 E		Call WriteString					;write to console

 00000260  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object 
 00000263  83 C3 44			add ebx, OFFSET olympian.medals
 00000266  8B 03			mov eax, [ebx]
 00000268  E8 00000000 E		Call WriteDec

 0000026D  B0 20			mov al, SPACE
 0000026F  E8 00000000 E		Call WriteChar

 00000274  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object 
 00000277  83 C3 48			add ebx, OFFSET olympian.medals[4]
 0000027A  8B 03			mov eax, [ebx]
 0000027C  E8 00000000 E		Call WriteDec

 00000281  B0 20			mov al, SPACE
 00000283  E8 00000000 E		Call WriteChar

 00000288  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object	
 0000028B  83 C3 4C			add ebx, OFFSET olympian.medals[8]
 0000028E  8B 03			mov eax, [ebx]
 00000290  E8 00000000 E		Call WriteDec
 00000295  E8 00000000 E		Call Crlf

				;output medal totals
 0000029A  BA 00000623 R		mov edx, OFFSET outtotal			;move output string to edx
 0000029F  E8 00000000 E		Call WriteString					;write to console
					
 000002A4  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object 
 000002A7  83 C3 44			add ebx, OFFSET olympian.medals		;move ebx to first medal field
 000002AA  03 0B			add ecx, [ebx]						;add value to total
					
					
 000002AC  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object 
 000002AF  83 C3 48			add ebx, OFFSET olympian.medals[4]	;move ebx to second medal field
 000002B2  03 0B			add ecx, [ebx]						;add value to total

 000002B4  8B 5D 08			mov ebx, [ebp+8]					;set ebx to struct object 
 000002B7  83 C3 4C			add ebx, OFFSET olympian.medals[8]	;move ebx to third medal field
 000002BA  03 0B			add ecx, [ebx]						;add value to total
					
 000002BC  8B C1			mov eax, ecx						;move total to eax
 000002BE  E8 00000000 E		Call WriteDec						;print total to console

 000002C3  E8 00000000 E		Call Crlf
 000002C8  E8 00000000 E		Call Crlf

 000002CD  61				popad
 000002CE  8B E5			mov esp, ebp
 000002D0  5D				pop ebp
 000002D1  C2 0004			ret 4
 000002D4			outputOlympian ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/10/17 12:03:32
struct.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
olympian . . . . . . . . . . . .	 00000050
  athlete  . . . . . . . . . . .	 00000000	 Byte
  country  . . . . . . . . . . .	 00000020	 Byte
  gender . . . . . . . . . . . .	 00000040	 Byte
  medals . . . . . . . . . . . .	 00000044	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000632 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002D4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bufferCopy . . . . . . . . . . .	P Near	 000000B0 _TEXT	Length= 00000038 Public STDCALL
  Copy . . . . . . . . . . . . .	L Near	 000000C0 _TEXT	
  Format . . . . . . . . . . . .	L Near	 000000D1 _TEXT	
  BYE  . . . . . . . . . . . . .	L Near	 000000DB _TEXT	
loadAllOlympians . . . . . . . .	P Near	 00000187 _TEXT	Length= 00000047 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001AC _TEXT	
  BYE  . . . . . . . . . . . . .	L Near	 000001C1 _TEXT	
loadFile . . . . . . . . . . . .	P Near	 0000005B _TEXT	Length= 00000055 Public STDCALL
  BAD  . . . . . . . . . . . . .	L Near	 0000009A _TEXT	
  OK . . . . . . . . . . . . . .	L Near	 000000A6 _TEXT	
loadOlympian . . . . . . . . . .	P Near	 000000E8 _TEXT	Length= 0000009F Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000005B Public STDCALL
  ERROR  . . . . . . . . . . . .	L Near	 00000022 _TEXT	
  PROCESS  . . . . . . . . . . .	L Near	 00000033 _TEXT	
  BYE  . . . . . . . . . . . . .	L Near	 0000004F _TEXT	
outputAllOlympians . . . . . . .	P Near	 000001CE _TEXT	Length= 0000002E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001E4 _TEXT	
  BYE  . . . . . . . . . . . . .	L Near	 000001F5 _TEXT	
outputOlympian . . . . . . . . .	P Near	 000001FC _TEXT	Length= 000000D8 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASTERISK . . . . . . . . . . . .	Number	 0000002Ah   
BSIZE  . . . . . . . . . . . . .	Number	 000003E8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FSIZE  . . . . . . . . . . . . .	Number	 00000064h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
LINESIZE . . . . . . . . . . . .	Number	 00000064h   
MAXNUM . . . . . . . . . . . . .	Number	 00000005h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPACE  . . . . . . . . . . . . .	Number	 00000020h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000064 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
ferror . . . . . . . . . . . . .	Byte	 0000045F _DATA	
filename . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
olist  . . . . . . . . . . . . .	olympian  00000470 _DATA	
outcountry . . . . . . . . . . .	Byte	 00000607 _DATA	
outgender  . . . . . . . . . . .	Byte	 00000611 _DATA	
outmedals  . . . . . . . . . . .	Byte	 0000061A _DATA	
outname  . . . . . . . . . . . .	Byte	 00000600 _DATA	
outtotal . . . . . . . . . . . .	Byte	 00000623 _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000044C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
